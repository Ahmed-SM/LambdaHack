cabal-version: >= 1.10
name:          LambdaHack
version:       0.1.20110919
license:       BSD3
license-file:  LICENSE
tested-with:   GHC == 7.2.1, GHC == 7.3
data-files:    LICENSE, CREDITS, PLAYING.md, README.md,
               config.default, config.bot, scores
author:        Andres Loeh, Mikolaj Konarski
maintainer:    Andres Loeh <mail@andres-loeh.de>
description:   This is an alpha release of LambdaHack, a roguelike game engine
               packaged together with a small example roguelike game
               (not yet well separated, this is one of future work directions,
               another being the improvement of the AI monad EDSL,
               so that the rules for synthesising monster behaviour
               from game content are more readable and easier to debug).
               A larger game using this engine will be Allure of the Stars
               (http://hackage.haskell.org/package/Allure).
synopsis:      A roguelike game engine in early development
homepage:      http://github.com/kosmikus/LambdaHack
bug-reports:   http://github.com/kosmikus/LambdaHack/issues
category:      Game Engine
build-type:    Simple

flag curses
  description:     enable curses support
  default:         False

flag vty
  description:     enable vty support
  default:         False

flag std
  description:     enable stdin/stdout support
  default:         False

library
  exposed-modules: Game.LambdaHack.Action,
                   Game.LambdaHack.Actions,
                   Game.LambdaHack.ActorAdd,
                   Game.LambdaHack.Actor,
                   Game.LambdaHack.ActorState,
                   Game.LambdaHack.Area,
                   Game.LambdaHack.AreaRnd,
                   Game.LambdaHack.Cave,
                   Game.LambdaHack.Color,
                   Game.LambdaHack.Command,
                   Game.LambdaHack.Config,
                   Game.LambdaHack.ConfigDefault,
                   Game.LambdaHack.Content.Content,
                   Game.LambdaHack.Content.ActorKind,
                   Game.LambdaHack.Content.CaveKind,
                   Game.LambdaHack.Content.ItemKind,
                   Game.LambdaHack.Content.RoomKind,
                   Game.LambdaHack.Content.RuleKind,
                   Game.LambdaHack.Content.TileKind,
                   Game.LambdaHack.Dir,
                   Game.LambdaHack.Display,
                   Game.LambdaHack.Dungeon,
                   Game.LambdaHack.DungeonState,
                   Game.LambdaHack.Effect,
                   Game.LambdaHack.EffectAction,
                   Game.LambdaHack.Feature,
                   Game.LambdaHack.Flavour,
                   Game.LambdaHack.FOV,
                   Game.LambdaHack.FOV.Common,
                   Game.LambdaHack.FOV.Digital,
                   Game.LambdaHack.FOV.Permissive,
                   Game.LambdaHack.FOV.Shadow,
                   Game.LambdaHack.Frequency,
                   Game.LambdaHack.Geometry,
                   Game.LambdaHack.Grammar,
                   Game.LambdaHack.HighScores,
                   Game.LambdaHack.Item,
                   Game.LambdaHack.ItemAction,
                   Game.LambdaHack.Keys,
                   Game.LambdaHack.Keybindings,
                   Game.LambdaHack.Kind,
                   Game.LambdaHack.Level,
                   Game.LambdaHack.LevelState,
                   Game.LambdaHack.Loc,
                   Game.LambdaHack.Msg,
                   Game.LambdaHack.Perception,
                   Game.LambdaHack.Random,
                   Game.LambdaHack.Save,
                   Game.LambdaHack.Start,
                   Game.LambdaHack.State,
                   Game.LambdaHack.Strategy,
                   Game.LambdaHack.StrategyState,
                   Game.LambdaHack.Tile,
                   Game.LambdaHack.Turn,
                   Game.LambdaHack.Utils.Assert,
                   Game.LambdaHack.Utils.File,
                   Game.LambdaHack.Utils.Multiline,
                   Game.LambdaHack.Version,
                   Game.LambdaHack.WorldLoc
  other-modules:   Paths_LambdaHack
  build-depends:   ConfigFile >= 1.1.1 && < 2,
                   array >= 0.3.0.3 && < 1, base >= 4 && < 5,
                   binary >= 0.5.0.2 && < 1, bytestring >= 0.9.2 && < 1,
                   containers >= 0.4.1 && < 1, directory >= 1.1.0.1 && < 2,
                   filepath >= 1.2.0.1 && < 2, mtl >= 2.0.1 && < 3,
                   old-time >= 1.0.0.7 && < 2, random >= 1.0.1 && < 2,
                   template-haskell >= 2.6 && < 3, transformers >= 0.2.2 && < 1,
                   zlib >= 0.5.3.1 && < 1
  default-language: Haskell2010
  default-extensions: MonoLocalBinds,
                      BangPatterns, RecordWildCards, NamedFieldPuns
  other-extensions: CPP, QuasiQuotes,
                    MultiParamTypeClasses, RankNTypes, ScopedTypeVariables
  ghc-options:     -Wall -fwarn-orphans -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unrecognised-pragmas
  ghc-options:     -fno-warn-auto-orphans -fno-warn-implicit-prelude -fno-warn-unused-do-bind
  ghc-options:     -fno-ignore-asserts -funbox-strict-fields

  if flag(curses) {
    exposed-modules: Game.LambdaHack.Display.Curses
    build-depends: hscurses >= 1.4.1 && < 2
    cpp-options:   -DCURSES
    extra-libraries: curses
  } else { if flag(vty) {
    exposed-modules: Game.LambdaHack.Display.Vty
    build-depends: vty >= 4.7.0.6
    cpp-options:   -DVTY
  } else { if flag(std) {
    cpp-options:   -DSTD
  } else {
    exposed-modules: Game.LambdaHack.Display.Gtk
    build-depends: gtk >= 0.12.1 && < 0.13
  } } }

executable LambdaHack
  main-is:         Main.hs
  other-modules:   Content.ActorKind,
                   Content.CaveKind,
                   Content.ItemKind,
                   Content.RoomKind,
                   Content.RuleKind,
                   Content.TileKind
  hs-source-dirs:  LambdaHack
  build-depends:   LambdaHack, ConfigFile >= 1.1.1 && < 2,
                   array >= 0.3.0.3 && < 1, base >= 4 && < 5,
                   binary >= 0.5.0.2 && < 1, bytestring >= 0.9.2 && < 1,
                   containers >= 0.4.1 && < 1, directory >= 1.1.0.1 && < 2,
                   filepath >= 1.2.0.1 && < 2, mtl >= 2.0.1 && < 3,
                   old-time >= 1.0.0.7 && < 2, random >= 1.0.1 && < 2,
                   template-haskell >= 2.6 && < 3, transformers >= 0.2.2 && < 1,
                   zlib >= 0.5.3.1 && < 1
  default-language: Haskell2010
  default-extensions: MonoLocalBinds,
                      BangPatterns, RecordWildCards, NamedFieldPuns
  other-extensions: CPP, QuasiQuotes,
                    MultiParamTypeClasses, RankNTypes, ScopedTypeVariables
  ghc-options:     -Wall -fwarn-orphans -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unrecognised-pragmas
  ghc-options:     -fno-warn-auto-orphans -fno-warn-implicit-prelude -fno-warn-unused-do-bind
  ghc-options:     -fno-ignore-asserts -funbox-strict-fields

  if flag(curses) {
    build-depends: hscurses >= 1.4.1 && < 2
    cpp-options:   -DCURSES
    extra-libraries: curses
  } else { if flag(vty) {
    build-depends: vty >= 4.7.0.6
    cpp-options:   -DVTY
  } else { if flag(std) {
    cpp-options:   -DSTD
  } else {
    build-depends: gtk >= 0.12.1 && < 0.13
    ghc-options:   -threaded
  } } }

executable DumbBot
  main-is:         Main.hs
  hs-source-dirs:  DumbBot
  build-depends:   base >= 4 && < 5, random >= 1.0.1 && < 2
  default-language: Haskell2010
  default-extensions: MonoLocalBinds,
                      BangPatterns, RecordWildCards, NamedFieldPuns
  other-extensions: CPP, QuasiQuotes,
                    MultiParamTypeClasses, RankNTypes, ScopedTypeVariables
  ghc-options:     -Wall -fwarn-orphans -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates -fwarn-monomorphism-restriction -fwarn-unrecognised-pragmas
  ghc-options:     -fno-warn-auto-orphans -fno-warn-implicit-prelude -fno-warn-unused-do-bind
  ghc-options:     -fno-ignore-asserts -funbox-strict-fields

source-repository head
  type:            git
  location:        git://github.com/kosmikus/LambdaHack.git
