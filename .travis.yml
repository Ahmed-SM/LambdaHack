# NB: don't set `language: haskell` here

# See also https://github.com/hvr/multi-ghc-travis for more information

env:
 - MYSETUP=7.8.4.gtk
 - MYSETUP=7.8.4.vty
 - MYSETUP=7.10.1.gtk
 - MYSETUP=7.10.1.vty
 - MYSETUP=7.10.2.gtk
 - MYSETUP=7.10.2.vty

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
 - case "$MYSETUP" in
    "") ;;

    "7.8.4.gtk")
      export GHCVER=7.8.4 ;
      export CABALVER=1.18 ;
      export GTKVTY=gtk ;;

    "7.8.4.vty")
      export GHCVER=7.8.4 ;
      export CABALVER=1.18 ;
      export GTKVTY=vty ;;

    "7.10.1.gtk")
      export GHCVER=7.10.1 ;
      export CABALVER=1.22 ;
      export GTKVTY=gtk ;;

    "7.10.1.vty")
      export GHCVER=7.10.1 ;
      export CABALVER=1.22 ;
      export GTKVTY=vty ;;

    "7.10.2.gtk")
      export GHCVER=7.10.2 ;
      export CABALVER=1.22 ;
      export GTKVTY=gtk ;;

    "7.10.2.vty")
      export GHCVER=7.10.2 ;
      export CABALVER=1.22 ;
      export GTKVTY=vty ;;

    *)
      export GHCVER=unknown ;
      echo "unknown/invalid Haskell Platform requested" ;
      exit 1 ;;

   esac

 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update

 - travis_retry sudo apt-get install happy-1.19.4 alex-3.1.3;
 - export PATH=/opt/alex/3.1.3/bin:/opt/happy/1.19.4/bin:$PATH;

# mine:
 - |
   if [ $GTKVTY = "gtk" ]; then
     cabal install -j2 gtk2hs-buildtools;
     cabal install -j2 -f-release --only-dependencies --force-reinstalls;
     cabal configure -f-release --enable-tests;
   else
     cabal install -fvty -j2 -frelease --only-dependencies --force-reinstalls;
     cabal configure -fvty -frelease --enable-tests;
   fi
 - cabal build -j2
 - cabal test

# - cabal install -j2 -frelease -fcurses --only-dependencies
# - cabal configure -f-release -fcurses
# - cabal build -j2

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 # tests that a source-distribution is correct; ignore -O2 warning
 - cabal check || true

 # tests that a source-distribution can be generated; ignore -O2 warning
 - cabal sdist || true

 # check that the generated source-distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}');
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      if [ $GTKVTY = "gtk" ]; then
        cabal install -j2 "$SRC_TGZ";
      else
        cabal install -fvty -j2 "$SRC_TGZ";
      fi;
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi;
   cd ..

# mine:
 - touch /tmp/stdtest.log;
 - (make test-travis-medium-no-safari || (tail -n 200 /tmp/stdtest.log ; exit 77));

# EOF
