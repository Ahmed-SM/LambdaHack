; ; This is a commented out copy of the default UI settings config file
; ; that is embedded in the binary.
; ; A user config file can overrides these options. The game looks for it at
; ; ~/.LambdaHack/config.ui.ini (or a similar path, depending on the OS).
; ; Warning: options are case-sensitive and only ';' for comments is permitted.

; [commands]
; ; All commands are defined here, except some movement and leader picking
; ; commands. All commands are shown on help screens except debug commands.
; ; The order below determines the order on the help screens.
; ; Remember to put commands that show information (e.g., enter targeting
; ; mode) first.

; ; Main Menu, which apart of these includes a few extra commands
; CTRL-x: (CmdMenu, GameExit)
; CTRL-r: (CmdMenu, GameRestart "campaign")
; CTRL-k: (CmdMenu, GameRestart "skirmish")
; CTRL-v: (CmdMenu, GameRestart "PvP")
; CTRL-o: (CmdMenu, GameRestart "Coop")
; CTRL-e: (CmdMenu, GameRestart "defense")

; ; Movement and terrain alteration
; KP_Begin: (CmdMove, Wait)
; CTRL-semicolon: (CmdMove, StepToTarget)
; less: (CmdMove, TriggerTile [TriggerFeature {verb = "ascend", object = "level", feature = Cause (Ascend 1)}, TriggerFeature {verb = "escape", object = "dungeon", feature = Cause (Escape 1)}])
; greater: (CmdMove, TriggerTile [TriggerFeature {verb = "descend", object = "level", feature = Cause (Ascend (-1))}, TriggerFeature {verb = "escape", object = "dungeon", feature = Cause (Escape (-1))}])
; c: (CmdMove, AlterDir [AlterFeature {verb = "close", object = "door", feature = CloseTo "vertical closed door Lit"}, AlterFeature {verb = "close", object = "door", feature = CloseTo "horizontal closed door Lit"}, AlterFeature {verb = "close", object = "door", feature = CloseTo "vertical closed door Dark"}, AlterFeature {verb = "close", object = "door", feature = CloseTo "horizontal closed door Dark"}])
; o: (CmdMove, AlterDir [AlterFeature {verb = "open", object = "door", feature = OpenTo "vertical open door Lit"}, AlterFeature {verb = "open", object = "door", feature = OpenTo "horizontal open door Lit"}, AlterFeature {verb = "open", object = "door", feature = OpenTo "vertical open door Dark"}, AlterFeature {verb = "open", object = "door", feature = OpenTo "horizontal open door Dark"}])

; ; Inventory and items
; I: (CmdItem, Inventory)
; g: (CmdItem, Pickup)
; d: (CmdItem, Drop)
; q: (CmdItem, Apply [ApplyItem {verb = "quaff", object = "potion", symbol = '!'}])
; r: (CmdItem, Apply [ApplyItem {verb = "read", object = "scroll", symbol = '?'}])
; t: (CmdItem, Project [ApplyItem {verb = "throw", object = "missile", symbol = '|'}])
; z: (CmdItem, Project [ApplyItem {verb = "zap", object = "wand", symbol = '/'}])

; ; Targeting
; slash: (CmdTgt, TgtFloor)
; asterisk: (CmdTgt, TgtEnemy)
; bracketleft: (CmdTgt, TgtAscend 1)
; braceleft: (CmdTgt, TgtAscend 10)
; bracketright: (CmdTgt, TgtAscend (-1))
; braceright: (CmdTgt, TgtAscend (-10))
; plus: (CmdTgt, EpsIncr True)
; minus: (CmdTgt, EpsIncr False)
; BackSpace: (CmdTgt, TgtClear)
; CTRL-question: (CmdTgt, TgtUnknown)
; CTRL-I: (CmdTgt, TgtItem)
; CTRL-less: (CmdTgt, TgtStair True)
; CTRL-greater: (CmdTgt, TgtStair False)

; ; Assorted
; question: (CmdMeta, Help)
; D: (CmdMeta, History)
; T: (CmdMeta, MarkSuspect)
; V: (CmdMeta, MarkVision)
; S: (CmdMeta, MarkSmell)
; Tab: (CmdMeta, MemberCycle)
; ISO_Left_Tab: (CmdMeta, MemberBack)
; equal: (CmdMeta, SelectActor)
; underscore: (CmdMeta, SelectNone)
; p: (CmdMeta, Repeat 1)
; P: (CmdMeta, Repeat 100)
; CTRL-p: (CmdMeta, Repeat 1000)
; apostrophe: (CmdMeta, Record)
; space: (CmdMeta, Clear)
; Escape: (CmdMeta, Cancel)
; Return: (CmdMeta, Accept)

; ; CmdDebug
; CTRL-s: (CmdDebug, GameSave)
; CTRL-y: (CmdDebug, Resend)
; CTRL-d: (CmdDebug, GameDifficultyCycle)

; [file]
; ; Names (or prefixes) of various game files.
; ; They reside in ~/.LambdaHack or similar.
; savePrefix: save

; [macros]
; R: KP_Begin P
; semicolon: CTRL-semicolon P
; x: CTRL-question CTRL-semicolon P
; X: ' CTRL-question CTRL-semicolon ' P
; backslash: ' asterisk Return t Return ' P
; ; handy shorthands with Vi keys
; comma: g
; period: KP_Begin

; [macro descriptions]
; R: rest (wait 100 times)
; semicolon: go to target for 100 steps
; x: explore the closest unknown spot
; X: autoexplore 100 times
; backslash: throw at the closest enemy 100 times

; [ui]
; font: Terminus,Monospace normal normal normal normal 12
; historyMax: 5000
; maxFps: 15
; noAnim: False
; runStopMsgs: False
